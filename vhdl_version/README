All the modules are a vhdl version of the cpp version. Some additional documentation is in the corresponding file in the cpp version folder and/or the documentation folder.

Modules are provided with a corresponding test module. It has, in general, generics to provide the test case parameters. Their default values are intended to perform a quick test. A generic test module run many cases.

The main loop of the test checks if the test is complete. If not it waits for a short time and spins the clock. If completed, the module displays some report and wait forever. By this way one should not specify a limit for the simulation. It exits automatically when done. The report is NOT a "mask" report. It is a summary of what happened. Since calculations are intended to be performed on a limited number of bits, the result may always be false. If possible, the reports tell the deviation to the expected value.

Since the master clock is about dozens of MHz and the output sample rate is maximum 192KHz, most of the modules would have been, at least, 90% idle. Since the project is intended to be multi channels and some modules are instantiated multiple times, a large FPGA would have been needed. The atomicity is not required. If a change is considered at the next sample, that introduces a latency of 20uS at 48KHz per delay. Then, the modules are designed to be shared. For practical and validations reasons, the architecture may, however, not be 100% optimal. If m per channel and n < n-max channels are required, there are m instantiations of the module handling n shared set of data. If n> n-max, more FPGA or a full duplication is required.

In general, the data is stored inside the modules. The read and write should always been done all the bits at a time. Indeed, there is no atomicity nor synchronisation between the generator and its configuration. Every late data is considered at the next (or more) sample (see above). The data is only written from the configuration receiver to the modules. A bus is provided to all the modules, each module has to decode if the data is for it. Only one value can be written at a time (from the master clock point of view). A parameter write consist of i) which module and which of the m instance (parameter prefix) ii) which of the n channel (parameter channel) iii) which value (which parameter) iv) the value (parameter data).
 